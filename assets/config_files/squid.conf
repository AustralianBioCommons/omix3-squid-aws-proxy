#give preference to ipv4 address lookups
dns_v4_first on

# Log format and rotation
logformat squid %ts.%03tu %6tr %>a %Ss/%03>Hs %<st %rm %ru %ssl::>sni %Sh/%<a %mt
logfile_rotate 10
debug_options rotate=10

#Because we just use one ACL for the whitelists, there can be
#NO repetitions in the matches.  If there is a wildcard that
#matches an explicit domain, it WILL error and squid will not
#start.
#To test to make sure you don't have an error without restarting
#squid, type 'squid -k check'
acl web_whitelist dstdomain "/etc/squid/web_whitelist"
acl web_whitelist dstdomain "/etc/squid/web_wildcard_whitelist"
acl https_whitelist ssl::server_name "/etc/squid/web_whitelist"

http_port 3128 name=explicit

http_port 3129 intercept # We may be able to go without this
#part, and just redirect the 80 traffic to 3130, but haven't
#tested it yet

## CVE-2025-54574 mitigation â€” block URN scheme
acl URN proto URN
http_access deny URN

http_access allow web_whitelist

https_port 3130 cert=/etc/squid/ssl/squid.pem ssl-bump intercept name=transparent

acl CONNECT method CONNECT

acl ssl_ports port 443
acl ssl_ports port 8443
acl plain_ports port 80
acl plain_ports port 8443
acl transparent_clients myportname transparent
acl explicit_clients myportname explicit

#The goal here is to let clients that explicitly proxy connect
#to anything on the whitelist on insecure ports, or secure ones
http_access allow explicit_clients plain_ports web_whitelist
http_access allow explicit_clients ssl_ports web_whitelist

#And here we allow transparent proxying, but only to ssl ports
http_access allow transparent_clients ssl_ports
http_access deny transparent_clients !ssl_ports

acl step1 at_step SslBump1
acl step2 at_step SslBump2
acl step3 at_step SslBump3
ssl_bump peek step1 all
ssl_bump peek step2 all
ssl_bump splice step3 all
ssl_bump terminate step2 all

http_access deny all

persistent_request_timeout 5 seconds

cache_dir /var/cache/squid 100 16 256
pid_filename /var/run/squid.pid

# vi:syntax=squid.conf
